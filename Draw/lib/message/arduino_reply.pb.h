/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.2 */

#ifndef PB_ARDUINO_REPLY_PB_H_INCLUDED
#define PB_ARDUINO_REPLY_PB_H_INCLUDED
#include <pb.h>

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Enum definitions */
typedef enum _ArduinoReply_EncryptionType {
    ArduinoReply_EncryptionType_NONE = 0,
    ArduinoReply_EncryptionType_AUTO = 1,
    ArduinoReply_EncryptionType_WEP = 2,
    ArduinoReply_EncryptionType_WPA = 3,
    ArduinoReply_EncryptionType_WPA2 = 4
} ArduinoReply_EncryptionType;

/* Struct definitions */
typedef struct _ArduinoReply_BatteryResult {
    float voltage;
} ArduinoReply_BatteryResult;

typedef struct _ArduinoReply_WifiScanResult {
    pb_callback_t mac_address;
    pb_callback_t signal_strength;
    pb_callback_t service_set_id;
    ArduinoReply_EncryptionType enc_type;
} ArduinoReply_WifiScanResult;

typedef struct _ArduinoReply {
    pb_callback_t scan_result;
    bool has_battery_result;
    ArduinoReply_BatteryResult battery_result;
} ArduinoReply;


/* Helper constants for enums */
#define _ArduinoReply_EncryptionType_MIN ArduinoReply_EncryptionType_NONE
#define _ArduinoReply_EncryptionType_MAX ArduinoReply_EncryptionType_WPA2
#define _ArduinoReply_EncryptionType_ARRAYSIZE ((ArduinoReply_EncryptionType)(ArduinoReply_EncryptionType_WPA2+1))


/* Initializer values for message structs */
#define ArduinoReply_init_default                {{{NULL}, NULL}, false, ArduinoReply_BatteryResult_init_default}
#define ArduinoReply_WifiScanResult_init_default {{{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, _ArduinoReply_EncryptionType_MIN}
#define ArduinoReply_BatteryResult_init_default  {0}
#define ArduinoReply_init_zero                   {{{NULL}, NULL}, false, ArduinoReply_BatteryResult_init_zero}
#define ArduinoReply_WifiScanResult_init_zero    {{{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, _ArduinoReply_EncryptionType_MIN}
#define ArduinoReply_BatteryResult_init_zero     {0}

/* Field tags (for use in manual encoding/decoding) */
#define ArduinoReply_BatteryResult_voltage_tag   1
#define ArduinoReply_WifiScanResult_mac_address_tag 1
#define ArduinoReply_WifiScanResult_signal_strength_tag 2
#define ArduinoReply_WifiScanResult_service_set_id_tag 3
#define ArduinoReply_WifiScanResult_enc_type_tag 4
#define ArduinoReply_scan_result_tag             1
#define ArduinoReply_battery_result_tag          2

/* Struct field encoding specification for nanopb */
#define ArduinoReply_FIELDLIST(X, a) \
X(a, CALLBACK, REPEATED, MESSAGE,  scan_result,       1) \
X(a, STATIC,   OPTIONAL, MESSAGE,  battery_result,    2)
#define ArduinoReply_CALLBACK pb_default_field_callback
#define ArduinoReply_DEFAULT NULL
#define ArduinoReply_scan_result_MSGTYPE ArduinoReply_WifiScanResult
#define ArduinoReply_battery_result_MSGTYPE ArduinoReply_BatteryResult

#define ArduinoReply_WifiScanResult_FIELDLIST(X, a) \
X(a, CALLBACK, SINGULAR, STRING,   mac_address,       1) \
X(a, CALLBACK, SINGULAR, STRING,   signal_strength,   2) \
X(a, CALLBACK, SINGULAR, STRING,   service_set_id,    3) \
X(a, STATIC,   SINGULAR, UENUM,    enc_type,          4)
#define ArduinoReply_WifiScanResult_CALLBACK pb_default_field_callback
#define ArduinoReply_WifiScanResult_DEFAULT NULL

#define ArduinoReply_BatteryResult_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, FLOAT,    voltage,           1)
#define ArduinoReply_BatteryResult_CALLBACK NULL
#define ArduinoReply_BatteryResult_DEFAULT NULL

extern const pb_msgdesc_t ArduinoReply_msg;
extern const pb_msgdesc_t ArduinoReply_WifiScanResult_msg;
extern const pb_msgdesc_t ArduinoReply_BatteryResult_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define ArduinoReply_fields &ArduinoReply_msg
#define ArduinoReply_WifiScanResult_fields &ArduinoReply_WifiScanResult_msg
#define ArduinoReply_BatteryResult_fields &ArduinoReply_BatteryResult_msg

/* Maximum encoded size of messages (where known) */
/* ArduinoReply_size depends on runtime parameters */
/* ArduinoReply_WifiScanResult_size depends on runtime parameters */
#define ArduinoReply_BatteryResult_size          5

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
